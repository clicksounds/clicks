name: Rename All Clicks and Deploy Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  rename:
    name: Rename and Deploy Pages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup ffmpeg
        uses: FedericoCarboni/setup-ffmpeg@v3
        id: setup-ffmpeg

      - name: Install Packages
        run: |
          python -m pip install ffmpeg
          python -m pip install pydub

      - name: Run Sounds Copier
        run: python ./.github/CopySoundsForRename.py

      - name: Run File Namer
        run: cd .github/FileNamer; python main.py

      - name: Copy Output to the Original Folder
        run: python .github/CopySoundsForRenamePT2.py

      - name: Update Repository
        run: |
          git config user.name "Sounds Updater"
          git config user.email github-actions@github.com
          git add .
          git commit -m "Update Sounds (renames all multiple click files)" && git push || echo "Nothing to commit, there's no changes."

      - name: Get Click and Release files
        id: get-files
        run: |
          output="{\"e\": {"
          for dir in Meme/*/
          do
              dir=${dir%*/}; dir=${dir##*/}
              output="${output}, \"${dir}\": {\"c\": ["
              for file in Meme/$dir/Clicks/*; do
                  file=${file##*/}; [ "$file" != "*" ] && output="${output}, \"${file}\""
              done
              output="${output}], \"r\": ["
              for file in Meme/$dir/Releases/*; do
                  file=${file##*/}; [ "$file" != "*" ] && output="${output}, \"${file}\""
              done
              output="${output}]}"
          done
          for dir in Useful/*/
          do
              dir=${dir%*/}; dir=${dir##*/}
              output="${output}, \"${dir}\": {\"c\": ["
              for file in Useful/$dir/Clicks/*; do
                  file=${file##*/}; [ "$file" != "*" ] && output="${output}, \"${file}\""
              done
              output="${output}], \"r\": ["
              for file in Useful/$dir/Releases/*; do
                  file=${file##*/}; [ "$file" != "*" ] && output="${output}, \"${file}\""
              done
              output="${output}]}"
          done
          output="${output}}}"
          echo "$output" > .github/JsonCreator/all_files.json

      - name: Make folder for packs and pack info
        run: |
          mkdir info
          mkdir packs

      - name: Debug ALL_FILES Variable
        run: echo "${{ steps.get-files.outputs.files }}" | wc -c

      - name: Generate all_files.json
        run: python .github/JsonCreator/makeallfiles.py
      
      - name: Run json creator
        run: cd .github/JsonCreator/; python main.py
        
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Generate index_list.json
        run: |
          set -e
          echo "Generating index_list.json..."

          tmp_file="all_packs.tmp"
          > "$tmp_file"

          has_audio_files() {
            local folder=$1
            find "$folder" -maxdepth 1 -iregex '.*\.\(mp3\|wav\|ogg\)' -type f | grep -q .
          }

          collect_packs() {
            local type=$1
            for dir in $type/*/
            do
              dir=${dir%*/}
              dir=${dir##*/}
              pack_path="$type/$dir/pack.json"
              if [ -f "$pack_path" ]; then
                name=$(jq -r '.name' "$pack_path")
                id=$(jq -r '.id' "$pack_path")
                version=$(jq -r 'if has("version") then .version else 1 end' "$pack_path")
                description=$(jq -c '.description // ""' "$pack_path")
                authors=$(jq -c '.authors // []' "$pack_path")

                has_clicks=false
                has_releases=false
                if [ -d "$type/$dir/Clicks" ] && has_audio_files "$type/$dir/Clicks"; then
                  has_clicks=true
                fi
                if [ -d "$type/$dir/Releases" ] && has_audio_files "$type/$dir/Releases"; then
                  has_releases=true
                fi

                folders=()
                [ "$has_clicks" = true ] && folders+=("\"Clicks\"")
                [ "$has_releases" = true ] && folders+=("\"Releases\"")
                folders_joined=$(IFS=, ; echo "${folders[*]}")

                echo -e "$name\t$id\t$version\t$type\t[$folders_joined]\t$description\t$authors\t$has_clicks\t$has_releases" >> "$tmp_file"
              fi
            done
          }

          collect_packs Useful
          collect_packs Meme

          echo '{' > index_list.json

          for category in Useful Meme; do
            echo "  \"$category\": [" >> index_list.json
            grep -P "\t$category\t" "$tmp_file" | sort -V | while IFS=$'\t' read -r name id version type folders description authors has_clicks has_releases; do
              echo "    {" >> index_list.json
              echo "      \"name\": \"$name\"," >> index_list.json
              echo "      \"id\": \"$id\"," >> index_list.json
              echo "      \"version\": $version," >> index_list.json
              echo "      \"type\": \"$type\"," >> index_list.json
              echo "      \"description\": $description," >> index_list.json
              echo "      \"authors\": $authors," >> index_list.json
              echo "      \"has-clicks\": $has_clicks," >> index_list.json
              echo "      \"has-releases\": $has_releases," >> index_list.json
              echo "      \"folders\": $folders" >> index_list.json
              echo "    }," >> index_list.json
            done
            sed -i '$ s/},$/}/' index_list.json
            echo "  ]," >> index_list.json
          done

          sed -i '$ s/],$/]/' index_list.json
          echo '}' >> index_list.json

          rm "$tmp_file"




      - name: Commit Generated index_list.json
        run: |
          git config user.name "Clicksounds Site"
          git config user.email "actions@github.com"
          git add index_list.json
          git commit -m "Update index_list.json" && git push || echo "Nothing to commit, no changes to JSON."

      - name: Compress into .zip for GitHub Pages
        run: |
          for dir in Meme/*/
          do
              dir=${dir%*/}
              dir=${dir##*/}
              cd Meme/${dir}
              7z a -r -ssw ../packs${dir}.zip pack.json pack.png Clicks/ Releases/
              cd ../../
              python .github/JsonCreator/removedir.py Meme/${dir}
          done
          for dir in Useful/*/
          do
              dir=${dir%*/}
              dir=${dir##*/}
              cd Useful/${dir}
              7z a -r -ssw ../${dir}.zip pack.json pack.png Clicks/ Releases/
              cd ../../
              python .github/JsonCreator/removedir.py Useful/${dir}
          done
          python .github/JsonCreator/removegithubfolder.py

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
